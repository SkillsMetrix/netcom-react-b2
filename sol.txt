import { StyleSheet, Text, View, Alert } from "react-native";
import React, { useEffect, useState } from "react";
import * as Location from "expo-location";

export default function GeoApp() {
  const [displayAddress, setDisplayAddress] = useState("Loading.....");
  const [locationServicesEnabled, setLocationServicesEnabled] = useState(false);

  useEffect(() => {
    checkLocationEnabled()
    getCurrentLocation()
  }, []);
  //check if loaction is enabled
  const checkLocationEnabled = async () => {
    let enabled = await Location.hasServicesEnabledAsync();
    if (!enabled) {
      Alert.alert("Location is not enabled...!", [
        {
          text: "Cancel",
          onPress: () => console.log("cancel pressed"),
          style: "cancel",
        },
        { text: "OK", onPress: () => console.log("OK Pressed") },
      ]);
    } else {
      setLocationServicesEnabled(enabled);
    }
  };
  //get current location
  const getCurrentLocation = async () => {
    let { status } = await Location.requestForegroundPermissionsAsync();
    console.log(status);
    if (status !== "granted") {
      Alert.alert("Permission Denied...!", [
        {
          text: "Cancel",
          onPress: () => console.log("cancel pressed"),
          style: "cancel",
        },
        { text: "OK", onPress: () => console.log("OK Pressed") },
      ]);
    }
    //get current position let and log
    const { coords } = await Location.getCurrentPositionAsync();
    console.log(coords);
    if (coords) {
      const { latitude, longitude } = coords;
      console.log(latitude, longitude);

      //provide lat and log to get the actual address
      let response = await Location.reverseGeocodeAsync({
        latitude,
        longitude,
      });
      console.log(response);
      // loop on the response
      for (let item of response) {
        let address = ` ${item.name} ${item.city} ${item.postalCode}`;

        setDisplayAddress(address);
      }
    }
  };


return (
  <View>
    <Text>{displayAddress}</Text>
  </View>
);
}
const styles = StyleSheet.create({});
